<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">
    <!--
		[id]：statement的id，要求在命名空间内唯一
		[parameterType]：入参的java类型
		[resultType]：查询出的单条结果集对应的java类型
		[#{}]： 表示一个占位符?
		[#{id}]：表示该占位符待接收参数的名称为id。
		注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义
	 -->
    <select id="findUserById" parameterType="int" resultType="com.xiaoz.model.User">
        SELECT * FROM user where id = #{id}
    </select>

    <!--
		[${}]：表示拼接SQL字符串
	 	[${value}]：表示要拼接的是简单类型参数。
		 注意：
		1、如果参数为简单类型时，${}里面的参数名称必须为value
		 简单类型:int, byte, ... String
		2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}
	-->

    <select id="findUserByName" parameterType="String" resultType="com.xiaoz.model.User">
        SELECT * FROM user where username like '%${value}%'
    </select>

    <!--插入数据
        这里的占位是写模型的属性
    -->
    <insert id="insertUser" parameterType="com.xiaoz.model.User">
        insert into user (username, sex, birthday, address)
        value (#{username}, #{sex}, #{birthday}, #{address})
    </insert>

    <!--删除数据-->
    <delete id="deleteUser" parameterType="int">
        delete from user where id = #{id}
    </delete>

    <!--更新数据-->
    <update id="updateUser" parameterType="com.xiaoz.model.User">
        update user set address = #{address},sex = #{sex}
        where id = #{id}
    </update>

    <!--插入时自动返回主键id-->
    <insert id="insertUser2" parameterType="com.xiaoz.model.User">
        <!--
            [selectKey标签]：通过select查询来生成主键
            [keyProperty]：指定存放生成主键的属性
            [resultType]：生成主键所对应的Java类型
            [order]：指定该查询主键SQL语句的执行顺序，相对于insert语句
            [last_insert_id]：MySQL的函数，要配合insert语句一起使用
        -->

        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username, sex, birthday, address)
        value (#{username}, #{sex}, #{birthday}, #{address})
    </insert>
</mapper>